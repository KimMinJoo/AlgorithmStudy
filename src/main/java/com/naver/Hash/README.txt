1. 해시의 개념
해시(Hash)는 계산 과정을 거치면서 작아진 값.
입력 -> 분해/조립 -> 해시의 과정을 통해 해시를 구한다.
Ex) 1065 -> 분해/조립 -> 15 (1065의 해시 15를 구했다.)

해시는 어떤 과정을 거쳐 작아진 '값'을 의미하므로 해시값이라고도 한다.
또 책에 따라 해시 코드라고도 한다.
즉 해시 = 해시값 = 해시코드 이다.


앞으로는 관련 알고리즘을 다룰 텐데 그 전에 몇가지 용어 정리.
* 해시 함수
- 해시의 개념에서 해시를 구하는 과정이 입력 -> 분해/조립 -> 해시라고 했는데 이 과정을 해싱이라 칭한다.
해싱에서 분해/조립 단계를 해시 함수라고 한다.
즉 해시 함수는 분해 및 조립등의 연산을 통해 입력값을 해시로 만드는 함수이다.
해시 함수의 중요한 점은 구해진 해시가 다른 해시와 구별되는 고유한 값이어야 한다는 점이다.
Ex) 101의 해시와 202의 해시는 다르다.
이 점은 해시함수의 경쟁력이라고 볼 수 있다.

*해시 검색
- 검색 키에 대한 해시를 계산하여 검색하는 방법.
Ex) 학번으로 학생 자료를 찾으려는 경우 학번이 검색 키가 된다.
즉 학번이 입력값이 되고 해시 함수를 거쳐 해시가 나오게된다.
여기서 해시는 검색하려는 자료의 주소가 된다고 했을때 해당 자료가 저장된 위치로 곧장 접근이 가능하다.

*해시 테이블
-해시 함수로 계산한 주소에 따라 자료를 저장하는 자료 구조
해시 테이블은 일반적으로 주소를 통해 바로 접근할 수 있는 배열을 선호한다.
해시 테이블은 N개의 버킷(Bucket)으로 이루어져 있습니다.


*버킷
- 해시테이블에서 자료를 저장하는 단위로 하나의 고유한 해시에 대응하여 실제 자료가 저장되는 곳.


*해싱
- 해시뒤에 ing가 붙은 단어로 '해시를 만든다'는 뜻입니다.
해싱의 경우 해시를 구하는 과정을 의미하고 해시는 '값'자체를 의미합니다.



2.해시 검색
해시검색은 해시를 이용하여 검색을 하는것으로 다른 검색알고리즘과 비교해 속도가 월등히 빠르다는 장점이 있다.

2.1 해시검색의 기본 개념
해시검색에서는 해시키라는 개념이 있는데 해시키는 내가 찾고자 하는 자료를 가리키는 값을 말한다.
학생자료를 찾는 예시를 들어서 설명.
검색키는 학번이 되고 계산된 해시는 검색하려는 자료의 위치가 된다.
예를들어 학번이 2016102라는 학생이 해시함수를 거쳤을 때 2라는 해시값을 가진다고 했을때,
2는 2016102학번을 가진 학생의 자료가 저장된 주소가 된다.
따라서 해당 자료가 저장된 위치로 곧장 접근할 수 있다.
여기서 헤시테이블은 학생자료가 저장된 테이블이다.
2016102학생의 학생자료는 2번 버킷에 저장되어있다.
참고로 버킷에는 한개의 자료만 저장할수도 슬롯이라는걸 두고 여러개의 자료를 저장할 수도 있다.

2.2 해시검색의 과정
2.2.1 자료 추가
해시검색을 하기 위해선 자료가 해시테이블에 미리 저장이 되어있어야 한다.
자료 추가의 경우 아래와 같은 3단계를 거친다.
주소계산 -> 해시테이블 확인 -> 자료저장.

*주소계산
- 주소 계산의 경우 전달받은 자료의 '검색키'로 자료를 저장할 버킷의 주소를 계산하는 단계다.
이 과정을 거치는 이유는 위에서 예를 든 학번을 예로들면 0000000 ~ 9999999까지 모두 10^7개만큼 값이 생길 수 있다.
반면 실제 해시 테이블의 경우 어떤 구조를 가지냐에따라 다르겠지만 00 ~ 99까지의 버켓을 둔다면 10^2개만큼만 저장할 수 있다.
값의 범위가 대략 10만배 작아진다.
이렇게 범위가 줄어드는 이유는 해시함수를 거치며 입력값이 작아지기 때문이다.
해시함수에서 값을 줄이는 방법은 뒤쪽에서 설명.

*해시테이블 확인
해시테이블 확인단계의경우 주소계산단계에서 계산된 주소(해시)를 가지고 해시 테이블을 확인한다.
자료가 저장될 주소를 알고도 확인을 하는 이유는 계산된 주소에 이미 다른 자료가 저장되어있는 경우때문이다.
물론 자료가 저장되어있지않으면 바로 저장을 한다.
하지만 이미 자료가 있어서 자료를 저장하지 못하는 경우가 발생할 수 있다.
이 경우를 충돌(Collision)이라고 한다.
Ex)
| 검색키 |해시|
| 2016102|   2|
| 2016202|   2|
충돌이 발생하면 자료를 저장할 수 있는 새로운 주소를 다시 계산해야한다.
해시 충돌의 경우 상당히 난처한 상황으로 이에 대처하기위한 다양한 방법이 제시되어있다.
이런 해시 충돌 방안의 경우 뒤쪽에서 설명.

*자료저장
실제 해시테이블에 자료를 저장하는 단계.
2단계에서 확인 후 빈 주소라면 자료를 저장하고 충돌이 발생했다면 다른 주소를 찾아서 저장한다.

2.2.2 자료 검색
자료 검색의 경우 아래와 같은 2단계를 거친다.
주소계산 -> 해시테이블 확인

*주소계산
- 전달받은 '검색키'값으로 버킷의 주소를 계산한다. 즉 해시함수를 이용하여 입력값에 대한 해시를 구한다.

*해시테이블 확인
- 주소 계산에서 계산한 해시를 통해 해시테이블에 정말 자료가 저장되어있는지 확인한다.


3.해시함수
위에서 얘기했듯이 해시의 핵심은 바로 해시함수다.
어떤 해시함수를 사용하느냐에 따라 해시 검색의 성능이 결정되기 때문이다.
구체적인 내용으로 들어가기전에 해시함수의 조건을 살펴보자.

*충돌발생빈도
- 충돌이 많이 발생한다는 것은 비어있는 주소가 있음에도 비어있지 않은 주소에 반복해서 저장할 가능성이 크다는 것으로 충돌발생빈도는 낮을수록 좋다.

*해시테이블사용률(분포율)
- 해시 테이블을 고르게 분포시킬 수 있는 해시 함수가 저장 공간 활용 효율면에서 좋다.

*해시함수계산속도
- 해시검색에 걸리는 시간을 감소시키기 때문에 효율면에서 좋다.

3.1 나머지 함수
해시함수에서 가장 쉽게 사용할 수 있는 함수중 하나이다.
나머지함수는 검색키 k를 해시테이블의 크기 M으로 나눈 나머지를 해시로 사용한다.
Ex)
| k | M |hash|
|125|100|  25|
| 15|  7|   1|

다만 나머지 함수를 해시 함수로 사용할 경우 테이블 크기 M이 소수일 수록 충돌 발생 빈도가 낮아진다.
충돌발생빈도가 낮다는 뜻은 해시테이블사용률 또한 높아진다는 뜻이다.
따라서 나머지 함수를 사용할 경우 될수있으면 M은 소수로 하는것이 좋다.

3.2 접기 함수
접기함수(혹은 접지합수)는 검색키를 먼저 분해하고 분해된 부분들을 조합하여 해시를 만드는 방법을 말한다.
보통 검색키의 크기가 해시테이블의 크기보다 큰 경우에 많이 사용한다.

