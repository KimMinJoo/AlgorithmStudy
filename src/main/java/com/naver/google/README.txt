문제12

1부터 10,000까지 8이라는 숫자가 총 몇번 나오는가?

8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다.
(※ 예를들어 8808은 3, 8888은 4로 카운팅 해야 함)

설명

알고리즘 스터디에서 공부한 내용 공유드립니다.

어떤 문제를 풀었는지 문제부터 알려드리겠습니다.


해결방법

가장 먼저 생각난 방법은 0~10,000까지 루프를 돌면서 각 숫자에 몇번 8이 나오는지 찾고 그 숫자가 나오는 개수를 새는 방법이었습니다.
그러나 이 방법의 경우 O(n)의 성능을 가지게 됩니다.
성능을 높이기 위해서 다른 여러 방법들을 생각해 봤습니다.
그리고 결국 생각해낸 제 해결방법은 자리수마다 내가 찾는 숫자가 몇번 나오는지 카운팅하는 방법입니다.
이 방법으로 해결할 경우 O(logn)으로 해결이 가능합니다. (log의 밑은 10입니다.)



아이디어

저는 이 두가지 조건을 가지고 생각해봤습니다.
각 자릿수에 올 수 있는 숫자는 0~9 까지 10개의 숫자만 올 수 있다. (조건1, 사실)
아마도 각 자리수마다 나오는 개수의 공식이 있을 것이다. (조건2, 가정) <-이 가정이 참이 된다면 공식을 이용하여 알고리즘완성



가정의 증명 과정

먼저 일의 자리수부터 생각해보겠습니다.

조건1을 생각해보면 10이 된다면 적어도 내가 찾는 숫자가 일의자리에 1번 등장한다는것을 보장할 수 있습니다.
이걸 좀 더 확장한다면 숫자가 10씩 증가할수록 일의자리에 제가 찾는 숫자가 1번씩 더 등장한다는 것을 보장할 수 있습니다.
(Ex. 10(8 등장), 20(18 등장), 30(28 등장), 40(38 등장),...)

십의 자리수를 생각해보겠습니다.
마찬가지로 조건1에 따라 십의자리가 10이 될 경우 적어도 내가 찾는 숫자가 십의자리에 10번 등장한다는것을 보장할 수 있습니다.
이걸 좀 더 확장한다면 숫자가 100씩 증가할수록 십의자리에 제가 찾는 숫자가 10번씩 더 등장한다는 것을 보장할 수 있습니다.
(Ex. 100(80, 81, ..., 89등장), 200(180, 181, ..., 189등장),...)

백의 자리, 천의 자리로 확장하더라도 이러한 규칙들을 발견 할 수 있었습니다.

따라서 (범위 / 10의 몫, 범위 / 100의 몫 * 10, 범위 / 1000의 몫 * 100,...)은 일의 자리, 십의 자리,백의 자리에 내가 찾는 숫자가 적어도 몇번 이상 등장한다는 보장을 할 수 있었습니다. -> 공식.1

예를 들어 저 문제로 생각한다면 8이 등장할 수 있는 곳은 만의 자리(사실 안되지만 알고리즘상), 천의 자리, 백의 자리, 십의 자리, 일의 자리입니다.


따라서 공식.1의 경우

일의 자리 계산 -> (10000/10) * 1 = 1000.
십의 자리 계산 -> (10000/100) * 10 = 1000.
백의 자리 계산 -> (10000/1000) * 100 = 1000.
천의 자리 계산 -> (10000/10000)* 1000 = 1000.
만의 자리 계산 -> (10000/100000) * 10000 = 0.

4000이라는 숫자가 나오게 됩니다.



문제1. 공식1은 최소 몇번 등장하는지 보장을 하지만 그만큼 등장한다는 보장은 할 수 없다.

공식.1은 문제가 있었습니다. 각 자리수 별로 적어도 몇번은 등장한다고 보장을 할 수 있는 공식은 알았지만 저만큼 등장한다는 보장을 얻을 수는 없었기 때문입니다.
간단하게 예를 들어서 설명해드리겠습니다.
Ex) 범위는 0~38, 찾는숫자 5, 등장횟수(5, 15, 25, 35) 4번

위의 공식으로 계산한 경우.
일의 자리 계산 -> (30 / 10) * 1 = 3.
십의 자리 계산 -> (30 / 100) * 10 = 0.

3이라는 숫자가 나오게 됩니다. 즉 적어도 3번이상은 등장한다는 것을 보장해줍니다.

4 > 3보다 크므로 저 공식은 맞는 공식입니다. 하지만 문제를 정확하게 풀 수는 없었습니다.



문제1의 해결

따라서 추가적인 계산이 필요했습니다.
위의 예시에서 조금더 생각을 추가해보면
일의 자리 계산 -> 10, 20, 30을 보장했으므로 5, 15, 25가 나온다고 보장을 한것이었습니다. 따라서 추가로 일의 자리에 내가 찾는 숫자가 몇번 더 등장하는지 새주면 답이 나오게 됩니다.

조금 더 확장을 해보면 각 자리수에 최소한 몇번 등장하는지 보장을 받고 마지막에 추가로 몇번 더 등장하는지 새주는 계산이 필요했습니다.

예를 들어 0~896이라는 범위가 주어지고 8을 찾아야 할때

                    최소 등장 보장            추가 등장 계산
 일의 자리 계산   (896 / 10) * 1 = 89     일의 자리가 6이므로 등장 0
 십의 자리 계산   (896 / 100) * 10 = 80   십의자리가 9 이므로 80번대가 지남. 즉 10번이 더 등장. 10
 백의 자리 계산   (800 / 1000) * 100 = 0  백의 자리가 8이므로 8이 등장. 근데 뒤의 숫자가 96, 즉 800~896까지 97번 더 등장.
(공식.2)
위의 계산을 보면 총 89 + 90 + 97 = 276번이 등장하게 됩니다.



​문제2. 공식.2의 경우 찾는 숫자가 0일 경우 최대자릿수에서 문제가 발생한다.

공식.2를 이용할 경우 찾는 숫자가 0의 경우 예외가 발생합니다.
예를들어 10000을 기준으로 생각하면 만의 자리에서 몇번 등장하는지 카운팅할 경우 00000~09999까지 계산하게 되는데.이것은 0이라는 숫자가 10000번 더 등장한 것으로 보게됩니다.


문제2의 해결

찾는 숫자가 0의 경우엔 계산을 다 마친뒤 범위의 최대자릿수를 빼주면 간단하게 해결됩니다..(Ex. 범위가 만단위의 수라면 10000을, 천단위의 수라면 1000을) -> 공식.3


더이상 문제는 발견되지 않았습니다.
따라서 공식.1 + 공식.2 + 공식.3을 통해 알고리즘 완성.
